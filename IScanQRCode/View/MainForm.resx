<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAABAAAHImAAByJgAAAAAAAAAA
        AAC9lSUAvZUlAL2VJQC9lSUAvZUlAL2VJQC9lSUAvZUlAL2VJQC9lSUAvZUlAL2VJQC9lSUAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAvZUlAL2VJQC9lSUAvZUlAL2VJQC9lSUAvZUlAL2VJQC9lSUAvZUlAL2V
        JQC9lSUAvZUlAL2VJQC9lSVHvZUlib2VJYe9lSWHvZUlh72VJYe9lSWHvZUlh72VJYe9lSWIvZUlQb2V
        JQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAC9lSUAvZUlPr2VJYi9lSWHvZUlh72VJYe9lSWHvZUlh72V
        JYe9lSWHvZUlib2VJUe9lSUAvZUlAL2VJYm9lSX/vZUl/72VJf+9lSX/vZUl/72VJf+9lSX/vZUl/72V
        Jf+9lSV+vZUlAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAL2VJQC9lSV3vZUl/72VJf+9lSX/vZUl/72V
        Jf+9lSX/vZUl/72VJf+9lSX/vZUlib2VJQC9lSUAvZUlh72VJf+9lSWKvZUlTL2VJU6+lCVOvpQlTr6U
        JUu9lSWRvZUl/72VJXu0nSwAnrM9AJ6zPQCesz0AnrM9AJ6zPQCesz0AtZ0rAL2VJXS9lSX/vZUllb6U
        JUu+lCVOvpQlTr2VJU69lSVMvZUlhr2VJf+9lSWHvZUlAL2VJQC9lSWHvZUl/72VJVLEjh8AlbxEDpe6
        QxKXukMSi8ZMDrmZKGy9lSX/upgnh5i5QhOesz0WnrM9Fp6zPRaesz0WnrM9Fp6zPRaXukITupgngb2V
        Jf+5mShyi8ZMDpe6QxKXukMSlbxED8aMHgC9lSVMvZUl/72VJYe9lSUAvZUlAL2VJYe9lSX/vZUlVJK+
        Rgyesz2xnrM92p6zPdmdtD3Zq6cz6L2VJf+uozDsnbQ92Z6zPdmesz3ZnrM92Z6zPdmesz3ZnrM92Z20
        PdmtpDHrvZUl/6ymMumdtD3ZnrM92Z6zPdmesz21lbxED72VJU69lSX/vZUlh72VJQC9lSUAvZUlh72V
        Jf+9lSVUlbxED56zPdSesz3+nrM92p20PtWrpzPlvZUl/66jMOqdtD3VnrM91p6zPdaesz3WnrM91p6z
        Pdaesz3WnbQ91a6kMem9lSX/rKYy5p20PdWesz3ZnrM9/Z6zPdmXukMSvpQlTr2VJf+9lSWHvZUlAL2V
        JQC9lSWHvZUl/72VJVSVvEQPnrM91J6zPd6esz0plLxFDrmYKG29lSX/u5cnhpe6QxCesz0UnrM9FJ6z
        PRSesz0UnrM9FJ6zPRSWu0MQupgngL2VJf+6mCdzlbxEDp6zPSaesz3ZnrM92Ze6QxK+lCVOvZUl/72V
        JYe9lSUAvZUlAL2VJYe9lSX/vZUlUYTMUQqdtD7UnbQ92pa6QxK2nCsAvZUlXb2VJf+9lSV7tZ0rAJ6z
        PQCesz0AnrM9AJ6zPQCesz0AnrM9ALacKwC9lSV0vZUl/72VJWS2nCoAlbxEDp20PdWdtD3Zi8ZMDr6U
        JUu9lSX/vZUlh72VJQC9lSUAvZUlh72VJf+9lSWZupgncKymMuaspjPpuZkodb2VJWS9lSWgvZUl/72V
        JXy9lSUAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAvZUlAL2VJXW9lSX/vZUlpb2VJWS6mCdzrKYy5qym
        Mum5mShyvZUllb2VJf+9lSWHvZUlAL2VJQC9lSWIvZUl/72VJf+9lSX/vZUl/72VJf+9lSX/vZUl/72V
        Jf+9lSX/vZUlfb2VJQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAC9lSUAvZUldr2VJf+9lSX/vZUl/72V
        Jf+9lSX/vZUl/72VJf+9lSX/vZUl/72VJYi9lSUAvZUlAL2VJT69lSV3vZUldLqXJ3+upDHoraQx67qY
        J4G9lSV0vZUldb2VJXa9lSU5vZUlAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAL2VJQC9lSU1vZUldr2V
        JXW9lSV0upgngK6kMemtpDHrupgngb2VJXS9lSV3vZUlPr2VJQC9lSUAvZUlAL2VJQC2nCsAlrtDD520
        PdSdtD3amLlCFLWdLAC9lSUAvZUlAL2VJQC9lSUAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAvZUlAL2V
        JQC9lSUAvZUlALacKwCWu0MQnbQ91Z20PdmXukITtZ0rAL2VJQC9lSUAvZUlAAAAAAAAAAAAAAAAAJ6z
        PQCesz0TnrM91J6zPduesz0XnrM9AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAnrM9AJ6zPRSesz3WnrM92Z6zPRaesz0AAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAnrM9AJ6zPROesz3UnrM9256zPReesz0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACesz0AnrM9FJ6zPdaesz3ZnrM9Fp6zPQAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAACesz0AnrM9E56zPdSesz3bnrM9F56zPQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAJ6zPQCesz0UnrM91p6zPdmesz0WnrM9AAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAJ6zPQCesz0TnrM91J6zPduesz0XnrM9AAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAnrM9AJ6zPRSesz3WnrM92Z6z
        PRaesz0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAnrM9AJ6zPROesz3UnrM9256zPReesz0AAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACesz0AnrM9FJ6z
        Pdaesz3ZnrM9Fp6zPQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACesz0AnrM9E56zPdSesz3bnrM9F56z
        PQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAJ6z
        PQCesz0UnrM91p6zPdmesz0WnrM9AAAAAAAAAAAAAAAAAL2VJQC9lSUAvZUlALWcKwCXukMQnbQ91J20
        PdqYuUIUtJ4sAL2VJQC9lSUAvZUlAL2VJQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAC9lSUAvZUlAL2V
        JQC9lSUAtZ0rAJe6QxCdtD3VnbQ92Zi5QhO0nSwAvZUlAL2VJQC9lSUAvZUlAL2VJUG9lSV+vZUle7uX
        J4auozDprqMw7LqYJ4i9lSV7vZUlfL2VJX29lSU8vZUlAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAL2V
        JQC9lSU5vZUlfb2VJXy9lSV7u5cnhq6jMOquozDsupgnh72VJXu9lSV+vZUlQb2VJQC9lSUAvZUliL2V
        Jf+9lSX/vZUl/72VJf+9lSX/vZUl/72VJf+9lSX/vZUl/72VJX29lSUAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAvZUlAL2VJXa9lSX/vZUl/72VJf+9lSX/vZUl/72VJf+9lSX/vZUl/72VJf+9lSWIvZUlAL2V
        JQC9lSWHvZUl/72VJZW5mChpq6cz5KunM+i5mShvvZUlXb2VJZy9lSX/vZUlfL2VJQAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAC9lSUAvZUldb2VJf+9lSWgvZUlXbmYKG2rpzPlq6cz6LmZKGy9lSWRvZUl/72V
        JYe9lSUAvZUlAL2VJYe9lSX/vZUlUYPNUgqdtD7UnbQ92pa7QxK1nSsAvZUlXb2VJf+9lSV7tJ4sAJ6z
        PQCesz0AnrM9AJ6zPQCesz0AnrM9ALWdLAC9lSV0vZUl/72VJWS2nCsAlLxFDp20PtWdtD3Zi8ZMDr6U
        JUu9lSX/vZUlh72VJQC9lSUAvZUlh72VJf+9lSVUlbxED56zPdSesz3enrM9LJa7QxK5mShvvZUl/7qY
        J4iYuUIUnrM9F56zPReesz0XnrM9F56zPReesz0XmLlCFLqYJ4G9lSX/uZkodZa6QxKesz0pnrM92p6z
        PdmXukMSvpQlTr2VJf+9lSWHvZUlAL2VJQC9lSWHvZUl/72VJVSVvEQPnrM91Z6zPf+esz3enbQ92qun
        M+i9lSX/rqMw7J20Pdqesz3bnrM9256zPduesz3bnrM9256zPdudtD3araQx672VJf+spjPpnbQ92p6z
        Pd6esz3+nrM92pe6QxK+lCVOvZUl/72VJYe9lSUAvZUlAL2VJYe9lSX/vZUlVJK/Rguesz2tnrM91Z6z
        PdSdtD7Uq6cz5L2VJf+uozDpnbQ91J6zPdSesz3UnrM91J6zPdSesz3UnrM91J20PdSupDHovZUl/6ym
        MuadtD7UnrM91J6zPdSesz2xlbxEDr2VJU69lSX/vZUlh72VJQC9lSUAvZUlh72VJf+9lSVSw48gAJK/
        RguVvEQPlbxED4PNUgq5mChpvZUl/7uXJ4aXukMQnrM9E56zPROesz0TnrM9E56zPROesz0TlrtDD7qX
        J3+9lSX/upgncITMUQqVvEQPlbxED5K+RgzEjh8AvZUlTL2VJf+9lSWHvZUlAL2VJQC9lSWHvZUl/72V
        JY69lSVSvZUlVL2VJVS9lSVUvZUlUb2VJZW9lSX/vZUle7WcKwCesz0AnrM9AJ6zPQCesz0AnrM9AJ6z
        PQC2nCsAvZUldL2VJf+9lSWZvZUlUb2VJVS9lSVUvZUlVL2VJVK9lSWKvZUl/72VJYe9lSUAvZUlAL2V
        JYm9lSX/vZUl/72VJf+9lSX/vZUl/72VJf+9lSX/vZUl/72VJf+9lSV+vZUlAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAL2VJQC9lSV3vZUl/72VJf+9lSX/vZUl/72VJf+9lSX/vZUl/72VJf+9lSX/vZUlib2V
        JQC9lSUAvZUlR72VJYm9lSWHvZUlh72VJYe9lSWHvZUlh72VJYe9lSWHvZUliL2VJUG9lSUAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAvZUlAL2VJT69lSWIvZUlh72VJYe9lSWHvZUlh72VJYe9lSWHvZUlh72V
        JYm9lSVHvZUlAL2VJQC9lSUAvZUlAL2VJQC9lSUAvZUlAL2VJQC9lSUAvZUlAL2VJQC9lSUAvZUlAL2V
        JQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAC9lSUAvZUlAL2VJQC9lSUAvZUlAL2VJQC9lSUAvZUlAL2V
        JQC9lSUAvZUlAL2VJQC9lSUAAAfgAAAH4AAAB+AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAfgAAAH
        4AAAB+AAAAfgAOB//gfgf/4H4H/+B+B//gfgf/4H4H/+BwAH4AAAB+AAAAfgAAAH4AAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAB+AAAAfgAAAH4AA=
</value>
  </data>
</root>